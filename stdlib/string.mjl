import { getchar, putchar } from "std/internal/native";
import { List } from "./list.mjl";
import { Result } from "./result.mjl";

struct String {
    data: List[Char],
}

fn char_to_int(c: Char): Result[Int, Unit] = match c {
    '0' => Ok(0),
    '1' => Ok(1),
    '2' => Ok(2),
    '3' => Ok(3),
    '4' => Ok(4),
    '5' => Ok(5),
    '6' => Ok(6),
    '7' => Ok(7),
    '8' => Ok(8),
    '9' => Ok(9),
    _ => Err(()),
}

fn int_to_char(num: Int): Result[Char, Unit] = match num {
    0 => Ok('0'),
    1 => Ok('1'),
    2 => Ok('2'),
    3 => Ok('3'),
    4 => Ok('4'),
    5 => Ok('5'),
    6 => Ok('6'),
    7 => Ok('7'),
    8 => Ok('8'),
    9 => Ok('9'),
    _ => Err(()),
}

impl String {
    fn print(): Unit = {
        match self.data {
            Cons(head, tail) => {
                putchar(head);
                &String { data: tail }.print()
            },
            Nil => {},
        }
    }

    fn println(): Unit = {
        self.print();
        putchar('\n');
    }

    fn _parse_int(acc: Int): Result[Int, Unit] = match self.data {
        Cons(head, tail) => match char_to_int(head) {
            Ok(num) => &String { data: tail }._parse_int(acc * 10 + num),
            Err(e) => Err(e),
        },
        Nil => Ok(acc),
    }

    fn parse_int(): Result[Int, Unit] = self._parse_int(0)

    fn length(): Int = self.data.length()

    fn appended(c: Char): String = &String { data: self.data.appended(c) }

    fn concat(other: String): String = &String { data: self.data.concat(other.data) }
}

fn join(lst: List[String], sep: Char): String = match lst {
    Cons(head, tail) => {
        match tail {
            Cons(_, _) => head.appended(sep).concat(join(tail, sep)),
            Nil => head,
        }
    },
    Nil => &String { data: Nil() },
}

fn from_list(lst: List[Char]): String = &String { data: lst }

/// Converts a number to a list of its decimal digits.
fn decimals(n: Int): List[Int] = match n {
    0 => Cons(0, Nil()),
    _ => {
        let digit = n % 10;
        let rest = n / 10;
        if rest == 0 {
            Cons(digit, Nil())
        } else {
            // ineffective
            decimals(rest).appended(digit)
        }
    },
}

fn int_to_string(number: Int): String =
    from_list(
        decimals(number).map(|decimal| {
            int_to_char(decimal).ok_or('x')
        })
    )

