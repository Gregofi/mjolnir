enum Result[O, E] {
    Ok(O),
    Err(E),
}

impl Result[O, E] {
    fn is_ok(): Bool = match self {
        Ok(_) => true,
        Err(_) => false,
    }

    fn is_err(): Bool = self.is_ok() == false

    fn ok_or[O](val: O): O = match self {
        Ok(x) => x,
        Err(_) => val,
    }

    fn ok_or_else[O](fun: () => O): O = match self {
        Ok(x) => x,
        Err(_) => fun(),
    }

    fn map[Q](fun: (O) => Q): Result[Q, E] = match self {
        Ok(x) => Ok(fun(x)),
        Err(e) => Err(e),
    }

    fn flat_map[Q](fun: (O) => Result[Q, E]): Result[Q, E] = match self {
        Ok(x) => fun(x),
        Err(e) => Err(e),
    }
}
