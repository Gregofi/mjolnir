enum Option[T] {
    Some(T),
    None,
}

enum List[T] {
    Cons(T, List[T]),
    Nil,
}

fn append[T](list: List[T], elem: T): List[T] = match list {
    Nil() => Cons(elem, Nil()),
    Cons(head, tail) => Cons(head, append(tail, elem)),
}

fn front[T](list: List[T]): Option[T] = match list {
    Cons(head, _) => Some(head),
    Nil() => None(),
}


fn main(): Int = {
    let lst = Nil();
    let appended = Cons(1, lst);
    match front(appended) {
        Some(x) => x,
        None() => 0,
    }
}
