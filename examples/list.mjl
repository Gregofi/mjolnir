enum Option[T] {
    Some(T),
    None,
}

enum List[T] {
    Cons(T, List[T]),
    Nil,
}

fn find[T](lst: List[T], n: T): Bool = match lst {
    Cons(head, tail) if head == n => true,
    Cons(head, tail) => find(tail, n),
    Nil => false,
}

fn main(): Int = {
    let lst = Cons(0, Cons(1, Cons(2, Cons(3, Nil()))));
    let exists = find(lst, 2);
    if exists {
        0
    } else {
        1
    }
}
