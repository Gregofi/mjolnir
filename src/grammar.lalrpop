use crate::ast::{StmtKind, Import, Module, ExprKind, Stmt, Expr, Decl, DeclKind, Operator, VarDecl, EnumVariant, MatchArm, Pattern, FunDecl};
use crate::location::Location;
use crate::frontend::utils::{WeaklyTypedIdentifier, StronglyTypedIdentifier, WrittenType, GenericDeclaration, TypeDeclaration};
use std::str::FromStr;


grammar;

// Lexer
match {
    // whitespace?
    r"\s*" => { },
    // Some magic regexes for comments
    r"/\*([^*]|[\r\n]|(\*+([^*/]|[\r\n])))*\*+/|(//.*)" => { },

    // keywords
    ";" => SEMICOLON,
    ":" => COLON,
    "_" => UNDERSCORE,
    "&" => AMPER,
    "!" => BANG,
    "->" => RIGHT_ARROW,
    "=>" => FAT_RIGHT_ARROW,
    "||" => OR,
    "&&" => AND,
    "="  => ASSIGN,
    "==" => EQ,
    "!=" => NEQ,
    ">"  => GREATER,
    "<"  => LESS,
    ">=" => GREATEREQ,
    "<=" => LESSEQ,
    "*"  => MULTIPLY,
    "/"  => DIVIDE,
    "%"  => MODULO,
    "+"  => PLUS,
    "-" => MINUS,
    "if" => IF,
    "else" => ELSE,
    "(" => LPAREN,
    ")" => RPAREN,
    "let" => LET,
    "[" => LBRACKET,
    "]" => RBRACKET,
    "{" => LBRACE,
    "}" => RBRACE,
    "|" => PIPE,
    "true" => TRUE,
    "false" => FALSE,
    "fn" => FN,
    "," => COMMA,
    "." => DOT,
    "return" => RETURN,
    "elif" => ELIF,
    "struct" => STRUCT,
    "enum" => ENUM,
    "match" => MATCH,
    "import" => IMPORT,
    "from" => FROM,
    "impl" => IMPL,
    "\"" => DOUBLE_QUOTE,
    "'" => SINGLE_QUOTE,

    r"[_A-Za-z][_A-Za-z0-9]*" => IDENTIFIER,
    r"[0-9]+" => NUMBER,
    r#""([^\\"]|\\[~ntr\\"])*""# => STRING_LITERAL,
    // TODO: Char '\'' doesn't work
    r"'([^'\\]|\\[~ntr\\'])'" => CHAR,
}

pub Module: (Vec<Import>, Vec<Decl>) = {
    <Imports> <TopLevelDecls>
}

Import: Import = {
    <l: @L> IMPORT LBRACE <imported_ids: Identifiers> RBRACE FROM <path: StringLiteral> SEMICOLON <r: @R> => {
        Import {
            imported_ids,
            path: path.to_string(),
            location: Location::new(l, r),
        }
    }
}

Imports: Vec<Import> = <Import*>;


TopLevelDecls: Vec<Decl> = {
    <mut v: (<TopLevelDecl>)*> <e: TopLevelDecl> => { v.push(e); v }
}

TopLevelDecl: Decl = {
    FunDecl,
    StructDecl,
    EnumDecl,
    ImplDecl,
}

Function: FunDecl = {
    <l: @L> FN <name: TypeDeclaration> LPAREN <parameters: MaybeTypedIdentifiers> RPAREN <return_type: (COLON <WrittenType>)?> ASSIGN <body: Expr> <r: @R> => FunDecl {
        name: name.name,
        parameters,
        return_type,
        body: Box::new(body),
        generics: name.generics,
        inferred_return_type: None,
        inferred_parameters: None,
    },
}

FunDecl: Decl = {
    <l: @L> <f: Function> <r: @R> => Decl::new(
        DeclKind::FunDecl(f),
        Location::new(l, r),
    )
}

Methods: Vec<FunDecl> = {
    <mut v: (<Function>)*> => { v },
}

ImplDecl: Decl = {
    <l: @L> IMPL <typename: TypeDeclaration> LBRACE <methods: Methods> RBRACE <r: @R> => Decl::new(
        DeclKind::ImplDecl {
            target: typename.name,
            generics: typename.generics,
            methods,
        },
        Location::new(l, r),
    )
}

VarDecl: VarDecl = {
    LET <name: Identifier> <return_type: (COLON <WrittenType>)?> ASSIGN <value: Expr> => VarDecl {
        name,
        ty: return_type,
        value: Box::new(value),
        inferred_ty: None,
    }
}

StructDecl: Decl = {
    <l: @L> STRUCT <typename: TypeDeclaration> LBRACE <fields: TypedIdentifiers> RBRACE <r: @R> => Decl::new(
        DeclKind::StructDecl {
            name: typename.name,
            fields,
            generics: typename.generics,
            methods: vec![],
        },
        Location::new(l, r),
    )
}

EnumVariant: EnumVariant = {
    <name: Identifier> LPAREN <fields: WrittenTypes> RPAREN => EnumVariant {
        name,
        fields,
    },
    <name: Identifier> => EnumVariant {
        name,
        fields: vec![],
    },
}

EnumVariants: Vec<EnumVariant> = Separated<EnumVariant, COMMA>;

EnumDecl: Decl = {
    <l: @L> ENUM <typename: TypeDeclaration> LBRACE <variants: EnumVariants> RBRACE <r: @R> => Decl::new(
        DeclKind::EnumDecl {
            name: typename.name,
            variants,
            generics: typename.generics,
            methods: vec![],
        },
        Location::new(l, r),
    )
}

MaybeTypedIdentifiers: Vec<WeaklyTypedIdentifier> = Separated<MaybeTypedIdentifier, COMMA>;

MaybeTypedIdentifier: WeaklyTypedIdentifier = {
    <name: Identifier> <ty: (COLON <WrittenType>)?> => WeaklyTypedIdentifier {
        name,
        ty,
    }
}

TypedIdentifiers: Vec<StronglyTypedIdentifier> = Separated<TypedIdentifier, COMMA>;

TypedIdentifier: StronglyTypedIdentifier = {
    <name: Identifier> COLON <ty: WrittenType> => StronglyTypedIdentifier {
        name,
        ty,
    }
}

Identifier: String = IDENTIFIER => <>.to_string();

Separated<T, S>: Vec<T> = {
    <mut v: (<T> S)*> <e: T?> => match e {
        None => v,
        Some(e) => { v.push(e); v }
    }
}

// ==================== Statements ====================


Stmt: Stmt = {
    <l: @L> <decl: VarDecl> <r: @R> => Stmt {
        node: StmtKind::VarDecl(decl),
        location: Location::new(l, r),
    },
    <l: @L> <expr: Expr> <r: @R> => Stmt {
        node: StmtKind::Expr(expr),
        location: Location::new(l, r),
    }
}


// ==================== Expressions ====================

// This rule is pretty stupid, we would want something like
// #[precedence(1)]
// BinOp<Prec1>,
// #[precedence(2)]
// BinOp<Prec2>,
// But that caused conflicts, hence the copy paste.
// Also, the binary operators are converted from string. We would ideally want
// something more "type safe".
Expr: Expr = {
    #[precedence(level="0")]
    Term,
    #[precedence(level="2")] #[assoc(side="left")]
    <l: @L> <lhs: Expr> <opcode: BinOpPrec1> <rhs: Expr> <r: @R> => {
        Expr {
            node: ExprKind::Binary{op: Operator::from(opcode.as_str()), lhs: Box::new(lhs), rhs: Box::new(rhs)},
            location: Location::new(l, r),
            inferred_ty: None,
        }
    },
    #[precedence(level="3")] #[assoc(side="left")]
    <l: @L> <lhs: Expr> <opcode: BinOpPrec2> <rhs: Expr> <r: @R> => {
        Expr {
            node: ExprKind::Binary{op: Operator::from(opcode.as_str()), lhs: Box::new(lhs), rhs: Box::new(rhs)},
            location: Location::new(l, r),
            inferred_ty: None,
        }
    },
    #[precedence(level="4")] #[assoc(side="left")]
    <l: @L> <lhs: Expr> <opcode: BinOpPrec3> <rhs: Expr> <r: @R> => {
        Expr {
            node: ExprKind::Binary{op: Operator::from(opcode.as_str()), lhs: Box::new(lhs), rhs: Box::new(rhs)},
            location: Location::new(l, r),
            inferred_ty: None,
        }
    },
}

BinOpPrec1: String = {
    MULTIPLY => <>.to_string(),
    DIVIDE => <>.to_string(),
    MODULO => <>.to_string(),
}

BinOpPrec2: String = {
    PLUS => <>.to_string(),
    MINUS => <>.to_string(),
}

BinOpPrec3: String = {
    EQ => <>.to_string(),
    NEQ => <>.to_string(),
    GREATER => <>.to_string(),
    LESS => <>.to_string(),
    GREATEREQ => <>.to_string(),
    LESSEQ => <>.to_string(),
}

Term: Expr = {
    Number => <>,
    BooleanLit => <>,
    IdentifierExpr => <>,
    CharExpr => <>,
    UnitExpr => <>,
    FunCallExpr => <>,
    MemberAccessExpr => <>,
    IfExpr => <>,
    Paren => <>,
    Compound => <>,
    Match => <>,
    StructInitializer => <>,
    LambdaExpr => <>,
}

Compound: Expr = {
    <l: @L> LBRACE <mut stmts: (<Stmt> SEMICOLON)*> <e: Expr?> RBRACE <r: @R> => {
        let final_expr = match e {
            Some(e) => Box::new(e),
            None => Box::new(Expr {
                location: Location::new(l, r), // Not totaly accurate
                node: ExprKind::Unit,
                inferred_ty: None,
            })
        };
        Expr {
            node: ExprKind::Compound (
                stmts,
                final_expr,
            ),
            location: Location::new(l, r),
            inferred_ty: None,
        }
    }
}

Match: Expr = {
    // TODO: We would probably like Expr here instead of Term
    <l: @L> MATCH <target: Term> LBRACE <arms: MatchArms> RBRACE <r: @R> => Expr {
        node: ExprKind::Match {
            target: Box::new(target),
            arms,
        },
        location: Location::new(l, r),
        inferred_ty: None,
    }
}

MatchArms: Vec<MatchArm<Expr>> = Separated<MatchArm, COMMA>;

MatchArm: MatchArm<Expr> = {
    <pattern: Pattern> <cond: (IF <Expr>)?> FAT_RIGHT_ARROW <body: Expr> => MatchArm {
        pattern,
        cond: cond.map(Box::new),
        body: Box::new(body),
    }
}

IdentifierList: Vec<String> = Separated<Identifier, COMMA>;

Patterns: Vec<Pattern> = Separated<Pattern, COMMA>;

Pattern: Pattern = {
    UNDERSCORE => Pattern::Wildcard,
    NUMBER => Pattern::Int(i64::from_str(<>).unwrap()),
    CHAR => Pattern::Char(<>.chars().nth(1).unwrap() as u8),
    TRUE => Pattern::Boolean(true),
    FALSE => Pattern::Boolean(false),
    DOUBLE_QUOTE <id: Identifier> DOUBLE_QUOTE => Pattern::String(id),
    <name: Identifier> LBRACE <fields: IdentifierList> RBRACE => Pattern::Struct {
        name,
        fields,
    },
    <name: Identifier> LPAREN <patterns: Patterns> RPAREN => Pattern::Enum {
        name,
        patterns,
    },
    <name: Identifier> => Pattern::Identifier(name),
}

BooleanLit: Expr = {
    TrueExpr => <>,
    FalseExpr => <>,
}

TrueExpr: Expr = {
    <l: @L> TRUE <r: @R> => Expr {
        node: ExprKind::Boolean(true),
        location: Location::new(l, r),
        inferred_ty: None,
    },
}

FalseExpr: Expr = {
    <l: @L> FALSE <r: @R> => Expr {
        node: ExprKind::Boolean(false),
        location: Location::new(l, r),
        inferred_ty: None,
    },
}

Paren: Expr = {
    <l: @L> LPAREN <expr: Expr> RPAREN <r: @R> => expr,
}

MemberAccessExpr: Expr = {
    <l: @L> <target: Term> DOT <member: Identifier> <r: @R> => Expr {
        node: ExprKind::MemberAccess {
            target: Box::new(target),
            member
        },
        location: Location::new(l, r),
        inferred_ty: None,
    }
}

FunCallExpr: Expr = {
    <l: @L> <target: Term> LPAREN <args: Arguments> RPAREN <r: @R> => Expr {
        node: ExprKind::FunCall{target: Box::new(target), args},
        location: Location::new(l, r),
        inferred_ty: None,
    }
}

Arguments: Vec<Expr> = Separated<Expr, COMMA>;

IfExpr: Expr = {
    <l: @L> IF <cond: Expr> <then: Compound> ELSE <els: Compound> <r: @R> => Expr {
        node: ExprKind::If { cond: Box::new(cond), then: Box::new(then), els: Box::new(els) },
        location: Location::new(l, r),
        inferred_ty: None,
    }
}

IdentifierExpr: Expr = {
    <l: @L> <id: Identifier> <r: @R> => Expr {
        node: ExprKind::Identifier(id),
        location: Location::new(l, r),
        inferred_ty: None,
    }
}

LambdaExpr: Expr = {
    <l: @L> PIPE <parameters: MaybeTypedIdentifiers> PIPE <return_type: (COLON <WrittenType>)?> <body: Compound> <r: @R> => Expr {
        node: ExprKind::Lambda (FunDecl {
            name: "AnonymousFunction".to_string(),
            parameters,
            return_type,
            body: Box::new(body),
            inferred_parameters: None,
            inferred_return_type: None,
            generics: vec![],
        }),
        location: Location::new(l, r),
        inferred_ty: None,
    }
}

Number: Expr = {
    <l: @L> <n: NUMBER> <r: @R> => Expr {
        node: ExprKind::Int(i64::from_str(n).unwrap()),
        location: Location::new(l, r),
        inferred_ty: None,
    }
}

StringLiteral: String = {
    <str: STRING_LITERAL> => {
        let mut chars = str.chars();
        chars.next();
        chars.next_back();
        chars.as_str().to_string()
    }
}

CharExpr: Expr = {
    <l: @L> <c: CHAR> <r: @R> => Expr {
        node: ExprKind::Char({
            let c = match c {
                "'\\n'" => '\n',
                "'\\t'" => '\t',
                "'\\r'" => '\r',
                "'\\0'" => '`',
                _ => c.chars().nth(1).unwrap(),
            };
            c as u8
        }),
        location: Location::new(l, r),
        inferred_ty: None,
    }
}

UnitExpr: Expr = {
    <l: @L> LPAREN RPAREN <r: @R> => Expr {
        node: ExprKind::Unit,
        location: Location::new(l, r),
        inferred_ty: None,
    }
}

IdentifierMapping: (String, Expr) = {
    <ident: Identifier> COLON <expr: Expr> => (ident, expr),
}

IdentifiersMapping: Vec<(String, Expr)> = Separated<IdentifierMapping, COMMA>;

Identifiers: Vec<String> = Separated<Identifier, COMMA>;

Generics: Vec<WrittenType> = {
    LBRACKET <names: WrittenTypes> RBRACKET => names,
}

TypeDeclarationGenerics: Vec<GenericDeclaration> = {
    LBRACKET <names: Identifiers> RBRACKET => names.into_iter().map(|name| GenericDeclaration { name }).collect(),
}

TypeDeclaration: TypeDeclaration = {
    <name: Identifier> <generics: TypeDeclarationGenerics?> => {
        TypeDeclaration { name, generics: generics.unwrap_or(vec![]) }
    },
}

WrittenType: WrittenType = {
    // TODO: Generics
    <name: Identifier> <generics: Generics?> => WrittenType::Identifier{ name, generics: generics.unwrap_or(vec![]) },
    LPAREN <params: WrittenTypes> RPAREN FAT_RIGHT_ARROW <return_type: WrittenType> => WrittenType::Function {
        params,
        return_type: Box::new(return_type),
    },
    // TODO: Int => Int (currently causes conflict)
}

WrittenTypes: Vec<WrittenType> = Separated<WrittenType, COMMA>;

StructInitializer: Expr = {
    // TODO: This amper is here cause otherwise there is a conflict.
    <l: @L> AMPER <name: Identifier> <generics: Generics?> LBRACE <fields: IdentifiersMapping> RBRACE <r: @R> => Expr {
        node: ExprKind::StructInitializer {
            name,
            fields,
            generics: generics.unwrap_or(vec![]),
        },
        location: Location::new(l, r),
        inferred_ty: None,
    }
}
